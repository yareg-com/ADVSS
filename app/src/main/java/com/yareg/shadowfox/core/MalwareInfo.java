package com.yareg.shadowfox.core;

import com.yareg.shadowfox.util.DomainEntry;

import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashSet;

public class MalwareInfo {
    private static ArrayList<DomainEntry> maliciousList = new ArrayList<>();
    private static HashSet<String> maliciousSet = new HashSet<>();
    
    public static String getProperTab(int depth) {
        StringBuilder builder = new StringBuilder();
        for (int i = 0; i < depth;i ++)
            builder.append("  ");
        return builder.toString();
    }
    
    public static void depthFirstOutputList(ArrayList<DomainEntry> list, int depth) {
        String tab = getProperTab(depth);
        for (DomainEntry item : list) {
            System.out.println(tab + item.head);
            depthFirstOutputList(item.tails, depth + 1);
        }
    }
    
    public static void loadMalwareList(InputStream input) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        String line;
        while ((line = reader.readLine()) != null) {
            ArrayList<DomainEntry> index = maliciousList;
            String[] items = line.split("\\.");
            for (int i = items.length-1; i >= 0;i --) {
                boolean isContained = false;
                for (DomainEntry entry : index) {
                    if (entry.head.equals(items[i])) {
                        isContained = true;
                        index = entry.tails;
                        break;
                    }
                }
                if (!isContained) {
                    DomainEntry head = new DomainEntry(items[i]);
                    DomainEntry last = head;
                    for (int j = i-1;j >= 0;j --) {
                        last.add(items[j]);
                        last = last.get(items[j]);
                    }
                    index.add(head);
                    break;
                }
            }
        }
    }
    
    public static boolean isContainedInList(String host) {
        String[] items = host.split("\\.");
        ArrayList<DomainEntry> index = maliciousList;
        int i = items.length - 1;
        while (true) {
            boolean isMatch = false;
            for (DomainEntry entry : index) {
                if (entry.head.equals(items[i])) {
                    isMatch = true;
                    index = entry.tails;
                    i -= 1;
                    break;
                }
            }
            
            if (index.size() == 0 && i >= 0) return true;   // 子域名
            if (i < 0) return true;                         // 恰好匹配
            if (!isMatch) return false;                     // 不匹配
        }
    }
    
    public static void loadMaliciousSet(InputStream input) throws Exception {
        BufferedReader reader = new BufferedReader(new InputStreamReader(input));
        String line;
        while ((line = reader.readLine()) != null) {
            maliciousSet.add(line);
        }
        reader.close();
    }
    
    public static boolean isContainedInSet(String domain) {
        domain = domain.toLowerCase();
        //检查是否子域名
        while (domain.length() > 0) {
            if (maliciousSet.contains(domain)) {
                return true;
            } else {
                int start = domain.indexOf('.') + 1;
                if (start > 0 && start < domain.length()) {
                    domain = domain.substring(start);
                } else {
                    return false;
                }
            }
        }
        return false;
    }
    
}

